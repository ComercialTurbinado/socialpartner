// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  SocialAccount[]
  posts     SocialPost[]
}

model SocialAccount {
  id           String   @id @default(uuid())
  platform     String   // facebook, instagram, twitter, linkedin, google
  accountId    String   // ID from the platform
  username     String?
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  posts        SocialPost[]

  @@unique([platform, accountId])
}

model SocialPost {
  id            String   @id @default(uuid())
  content       String
  mediaUrls     String?  // JSON array of media URLs
  platformId    String?  // ID of the post on the platform
  scheduledFor  DateTime?
  publishedAt   DateTime?
  engagement    Json?    // Likes, comments, shares as JSON
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  socialAccount SocialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId     String
}
